# The vast majority of user submissions are just new keymaps/keyboards.
# Take additional care to validate these.
name: 'Validate Keymap Submission'

on:
  push:
    paths:
      - 'keyboards/**'
  pull_request:
    paths:
      - 'keyboards/**'

permissions:
  contents: read
  pull-requests: read

jobs:
  validate-keyboard:
    runs-on: ubuntu-latest
    container: qmkfm/qmk_cli

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fix safe directory problem
      run: git config --global --add safe.directory $(pwd)

    - name: Fix submodules
      run: make git-submodule

    - name: Verify Vial UID is unique
      run: python3 util/ci_vial_verify_uid.py

    - name: Determine affected files
      id: file_changes
      uses: tj-actions/changed-files@v35
      with:
        #files: keyboards/**
        separator: "|"

    - name: Check added files for undesirable objects
      shell: 'bash {0}'
      run: |
        IFS=$'|' read -a NEW_FILES <<< "${{ steps.file_changes.outputs.added_files }}"
           for newfile in "${NEW_FILES[@]}"; do
             # Not necessarily rejection-worthy
             file -b "${newfile}" | grep -qv "text" && echo "::warning file={file}::non-text file detected"
             # ...shout out to hex files
             [[ "${newfile##*.}" == 'hex' ]] && echo "::warning file={file}::non-text file (hex) detected"
           done
           unset IFS

    - name: Compile and check affected keyboards
      shell: 'bash {0}'
      run: |
        exit_code=0

        QMK_CHANGES=$(echo -e '${{ steps.file_changes.outputs.all_modified_files}}' | sed 's/|/\n/g')
        QMK_KEYBOARDS=$(qmk list-keyboards)
        for KB in ${QMK_KEYBOARDS}; do
          KEYBOARD_CHANGES=$(echo "${QMK_CHANGES}" | grep -E '^(keyboards/'${KB}'/)')
          if [[ -z ${KEYBOARD_CHANGES} ]]; then
            # skip as no changes for this keyboard
            continue
          fi

          #TODO: be smarter about keymap detection
          for KEYMAP in default vial; do

            # Lint failures now will become compilation failures after a few upstream changes, so at least flag to try and get the submitter to fix
            qmk lint -kb ${KB} -km ${KEYMAP} || echo "::notice title=${KB} ${KEYMAP} Lint Check Failed::Please run qmk lint -kb ${KB} -km ${KEYMAP}"

            # Ensure keymaps build
            make ${KB}:${KEYMAP} -j $(nproc) -e SILENT=true
            exit_code=$(( $exit_code | $? ))
          done
        done

        test $exit_code -eq 0
