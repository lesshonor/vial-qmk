# The vast majority of user submissions are just new keymaps/keyboards.
# Take additional care to validate these.
name: 'Validate Keymap Submission'

on:
  push:
    paths:
      - 'keyboards/**'
  pull_request:
    paths:
      - 'keyboards/**'

permissions:
  contents: read
  pull-requests: read

jobs:
  validate-keyboard:
    runs-on: ubuntu-latest
    container: qmkfm/qmk_cli
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Fix safe directory problem
      run: git config --global --add safe.directory $(pwd)

    - name: Fix submodules
      run: make git-submodule

    - name: Verify Vial UID is unique
      run: python3 util/ci_vial_verify_uid.py

    - name: Determine affected files
      id: file_changes
      uses: tj-actions/changed-files@v35
      with:
        #Using pipe here to envoid URL encoding: https://github.com/tj-actions/changed-files#known-limitation
        separator: "|"

    - name: Check new files
      shell: 'bash {0}'
      run: |
        exit_code=0

        IFS=$'|' read -ra NEW_FILES <<< "${{ steps.file_changes.outputs.added_files }}"
           for newfile in "${NEW_FILES[@]}"; do
             # Flag new files outside of keyboards
             [[ ! "${newfile}" =~ ^keyboards/ ]] && echo "::warning file=${newfile}::Files added outside of the keyboard directory."
             #TODO: This will print for every added file rather than every added directory, figure out how to condense (probably just "use Python")
             [[ "${newfile}" =~ /keymaps/ && ! "${newfile}" =~ /(vial|default)/ ]] && echo "::notice file=${newfile}::Keymaps added other than default and vial"
             # Flag binary files
             #file -b "${newfile}" | grep -qv "text" && echo "::warning file=${newfile}::non-text file detected"
             git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 --numstat ${{ env.GITHUB_REF }} -- "${newfile}" | cut -f1 | grep -q '-' && exit_code=1 && echo "::error file=${newfile},title=Binary File Detected::Binary files are not permitted."
             # ...and Intel hex files, which technically aren't binary.
             [[ "${newfile##*.}" == 'hex' ]] && exit_code=1 && echo "::error file=${newfile},title=Hex File Detected::Precompiled firmware is not permitted."
           done
           unset IFS

         exit $exit_code

    - name: Compile and check affected keyboards
      shell: 'bash {0}'
      run: |
        exit_code=0

        QMK_CHANGES=$(echo -e '${{ steps.file_changes.outputs.all_modified_files}}' | sed 's/|/\n/g')
        QMK_KEYBOARDS=$(qmk list-keyboards)
        for KB in ${QMK_KEYBOARDS}; do
          KEYBOARD_CHANGES=$(echo "${QMK_CHANGES}" | grep -E '^(keyboards/'${KB}'/)')
          if [[ -z ${KEYBOARD_CHANGES} ]]; then
            # skip as no changes for this keyboard
            continue
          fi

          #TODO: be smarter about keymap detection
          for KEYMAP in default vial; do

            # Lint failures now will become compilation failures after a few upstream changes, so at least flag to try and get the submitter to fix
            qmk lint -kb ${KB} -km ${KEYMAP} || echo "::warning title=Lint Check Failed::Please run qmk lint -kb ${KB} -km ${KEYMAP} and try to correct failures. Lint failures now will become compilation failures in later versions of QMK."

            # Ensure keymaps build
            make ${KB}:${KEYMAP} -j $(nproc) -e SILENT=true
            # If any fail, step has failed.
            exit_code=$(( $? || exit_code ))
          done
        done

        exit $exit_code
